"""
Vulnerability aggregation and analysis utilities.

Centralizes vulnerability counting and aggregation logic to eliminate
duplication across the codebase.
"""

from typing import Dict

from core.models import ImageAnalysis, SeverityLevel


class VulnerabilityAggregator:
    """
    Centralized vulnerability aggregation logic.

    Provides methods to aggregate vulnerability counts from multiple images,
    eliminating duplication in scanner and report generator code.
    """

    @staticmethod
    def aggregate_by_severity(
        analyses: list[ImageAnalysis],
    ) -> Dict[str, int]:
        """
        Aggregate vulnerabilities from multiple analyses by severity.

        Args:
            analyses: List of image analyses to aggregate

        Returns:
            Dictionary mapping severity level to total count

        Example:
            >>> analyses = [analysis1, analysis2]
            >>> result = VulnerabilityAggregator.aggregate_by_severity(analyses)
            >>> print(result)
            {'Critical': 10, 'High': 25, 'Medium': 50, 'Low': 75, 'Negligible': 15}
        """
        # Initialize summary with all severity levels
        summary = {severity: 0 for severity in SeverityLevel.ordered_levels()}

        # Aggregate from all analyses
        for analysis in analyses:
            if analysis and analysis.vulnerabilities:
                v = analysis.vulnerabilities
                summary["Critical"] += v.critical
                summary["High"] += v.high
                summary["Medium"] += v.medium
                summary["Low"] += v.low
                summary["Negligible"] += v.negligible

        return summary

    @staticmethod
    def calculate_total_vulnerabilities(analyses: list[ImageAnalysis]) -> int:
        """
        Calculate total vulnerability count across multiple images.

        Args:
            analyses: List of image analyses

        Returns:
            Total number of vulnerabilities
        """
        return sum(
            analysis.vulnerabilities.total
            for analysis in analyses
            if analysis and analysis.vulnerabilities
        )

    @staticmethod
    def calculate_reduction_percentage(
        alternative_count: int,
        chainguard_count: int,
    ) -> float:
        """
        Calculate vulnerability reduction percentage.

        Args:
            alternative_count: Vulnerability count in alternative image
            chainguard_count: Vulnerability count in Chainguard image

        Returns:
            Reduction percentage (0-100)

        Example:
            >>> VulnerabilityAggregator.calculate_reduction_percentage(100, 5)
            95.0
        """
        if alternative_count == 0:
            return 0.0

        reduction = alternative_count - chainguard_count
        return (reduction / alternative_count) * 100.0

    @staticmethod
    def has_critical_vulnerabilities(analysis: ImageAnalysis) -> bool:
        """
        Check if an image has critical vulnerabilities.

        Args:
            analysis: Image analysis to check

        Returns:
            True if image has critical vulnerabilities
        """
        return (
            analysis
            and analysis.vulnerabilities
            and analysis.vulnerabilities.critical > 0
        )

    @staticmethod
    def get_highest_severity(analysis: ImageAnalysis) -> str:
        """
        Get the highest severity level present in an image.

        Args:
            analysis: Image analysis to check

        Returns:
            Highest severity level name ("Critical", "High", etc.)
        """
        if not analysis or not analysis.vulnerabilities:
            return "Unknown"

        v = analysis.vulnerabilities
        if v.critical > 0:
            return "Critical"
        elif v.high > 0:
            return "High"
        elif v.medium > 0:
            return "Medium"
        elif v.low > 0:
            return "Low"
        elif v.negligible > 0:
            return "Negligible"
        else:
            return "None"


__all__ = [
    "VulnerabilityAggregator",
]
